@using MessierMosaic.Db;
@using MessierMosaic.ViewModels;
@using TG.Blazor.IndexedDB;
@inject IndexedDBManager DbManager

<div class="card mb-2">
    <label for="@($"filePicker{Object?.Messier}")">
        <img class="card-img-top" src="@ImageDataURL" alt="Card image cap">
    </label>
    <div class="card-body">
        <h5 class="card-title">@($"{Object?.Messier} - {Object?.Name}")</h5>
        <p class="card-text">@Object?.Object</p>
        <InputFile id="@($"filePicker{Object?.Messier}")" OnChange="@SingleUpload" style="display:none;" title="Upload Image" accept=".jpg,.png,.jpeg" />
    </div>
</div>

@code {
    [Parameter]
    public long? ObjectId { get; set; } = 0;
    [Parameter]
    public MessierObject? Object { get; set; } = null;
    [Parameter]
    public EventCallback<long?> OnItemAdded { get; set; }
    [Parameter]
    public EventCallback<long?> OnItemDeleted { get; set; }

    public string ImageDataURL { get; set; } = "images/missing.png";

    private async Task SingleUpload(InputFileChangeEventArgs e)
    {

        var imagePreview = await e.File.RequestImageFileAsync(e.File.ContentType, 300, 300);
        var ms = new MemoryStream();
        await imagePreview.OpenReadStream(10 * 1024 * 1024).CopyToAsync(ms);
        var imagePreviewBytes = ms.ToArray();
        var imagesrc = Convert.ToBase64String(imagePreviewBytes);
        ImageDataURL = string.Format($"data:{e.File.ContentType};base64,{imagesrc}");
        Console.WriteLine($"Saved {ImageDataURL.Length} bytes preview");
        StateHasChanged();
        var ms2 = new MemoryStream();
        var image = await e.File.RequestImageFileAsync(e.File.ContentType, 1024, 1024);
        await image.OpenReadStream(10 * 1024 * 1024).CopyToAsync(ms2);
        var imageBytes = ms2.ToArray();
        Console.WriteLine($"Saved {ms2.Length} bytes actual image"); 

        var current = await DbManager.GetRecordById<long, MessierObjectEntry>(DbConfig.StoreName, ObjectId ?? 0);
        if (current == null)
        {
            Console.WriteLine($"Db Entry for object {ObjectId} missing, creating!");
            var newRecord = new StoreRecord<MessierObjectEntry>
                {
                    Storename = DbConfig.StoreName,
                    Data = new MessierObjectEntry
                    {
                        Id = ObjectId,
                        Image = imageBytes,
                        Preview = imagePreviewBytes,
                        ContentType = e.File.ContentType
                    }
                };
            await DbManager.AddRecord(newRecord);
            await OnItemAdded.InvokeAsync(ObjectId);
        } else
        {
            Console.WriteLine($"Db entry exists for object {ObjectId}, updating!");
            current.Image = imageBytes;
            current.Preview = imagePreviewBytes;
            current.ContentType = e.File.ContentType;

            var updatedRecord = new StoreRecord<MessierObjectEntry>
            {
                Storename = DbConfig.StoreName,
                Data = current
            };
            await DbManager.UpdateRecord(updatedRecord);
        }

    }

    protected override async Task OnParametersSetAsync()
    {
        if (Object == null || !ObjectId.HasValue) return;
        var current = await DbManager.GetRecordById<long, MessierObjectEntry>(DbConfig.StoreName, ObjectId.Value);
        if (current == null) return;
        var imagesrc = Convert.ToBase64String(current.Preview);
        ImageDataURL = string.Format($"data:{current.ContentType};base64,{imagesrc}");
    }
}
