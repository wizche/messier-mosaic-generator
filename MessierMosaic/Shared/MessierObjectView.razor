@using MessierMosaic.Db;
@using MessierMosaic.ViewModels;
@using MosaicLibrary;
@using TG.Blazor.IndexedDB;
@inject IndexedDBManager DbManager
@inject MosaicService MosaicService

<div class="card mb-2 h-100">
    <label for="@($"filePicker{Object?.Name}")">
        <div class="item">
            <div class="image">
                <img class="img img-responsive full-width card-img-top" src="@ImageDataURL" alt="Card image cap">
            </div> 
            @if(IsGenerating){ 
                <div class="overlay">
                    <div class="spinner-border text-primary" role="status">
                        <span class="sr-only"></span>
                    </div>
                </div>
            }
        </div>
    </label>
    <div class="card-body">
        <h6 class="card-title">@($"{Object?.GetTitle()}")</h6>
        <p class="card-text small">
            Constellation: @Object?.Constellation<br/>
            Type: @Object?.Type
            @if (Loaded)
            {
                <button class="float-end" @onclick="Delete"><span class="oi oi-trash"></span></button>                
            }
            </p>
        <InputFile id="@($"filePicker{Object?.Name}")" OnChange="@SingleUpload" style="display:none;" title="Upload Image" accept=".jpg,.png,.jpeg" />
    </div>
</div>

@code {
    [Parameter]
    public long? ObjectId { get; set; } = 0;
    [Parameter]
    public MessierObject? Object { get; set; } = null;
    [Parameter]
    public EventCallback<long?> OnItemAdded { get; set; }
    [Parameter]
    public EventCallback<long?> OnItemDeleted { get; set; }

    public bool Loaded { get; set; } = false;
    public bool IsGenerating { get; set; } = false;

    public string ImageDataURL { get; set; } = "images/missing.png";

    public async void Delete()
    {
        Loaded = false;
        ImageDataURL = Object?.PictureUrl ?? "images/missing.png";
        await DbManager.DeleteRecord(DbConfig.StoreName, ObjectId);
        await OnItemDeleted.InvokeAsync(ObjectId);
    }

    private async Task SingleUpload(InputFileChangeEventArgs e)
    {
        IsGenerating = true;
        var imagePreview = await e.File.RequestImageFileAsync(e.File.ContentType, 300, 300);
        var ms = new MemoryStream();
        await imagePreview.OpenReadStream(10 * 1024 * 1024).CopyToAsync(ms);
        var imagePreviewBytes = ms.ToArray();
        Console.WriteLine($"Generating preview");
        imagePreviewBytes = MosaicService.GenerateAnnotatedImage(imagePreviewBytes, $"{Object?.GetPictureDescription()}", 300);
        var imagesrc = Convert.ToBase64String(imagePreviewBytes);
        ImageDataURL = string.Format($"data:{e.File.ContentType};base64,{imagesrc}");
        Console.WriteLine($"Saved {ImageDataURL.Length} bytes preview");
        StateHasChanged();
        var ms2 = new MemoryStream();
        var image = await e.File.RequestImageFileAsync(e.File.ContentType, 1024, 1024);
        await image.OpenReadStream(10 * 1024 * 1024).CopyToAsync(ms2);
        var imageBytes = ms2.ToArray();
        Console.WriteLine($"Saved {ms2.Length} bytes actual image"); 

        var current = await DbManager.GetRecordById<long, MessierObjectEntry>(DbConfig.StoreName, ObjectId ?? 0);
        if (current == null)
        {
            Console.WriteLine($"Db Entry for object {ObjectId} missing, creating!");
            var newRecord = new StoreRecord<MessierObjectEntry>
                {
                    Storename = DbConfig.StoreName,
                    Data = new MessierObjectEntry
                    {
                        Id = ObjectId,
                        Image = imageBytes,
                        Preview = imagePreviewBytes,
                        ContentType = e.File.ContentType,
                        ImagePictureDescription = Object?.GetPictureDescription() ?? "n/a"
                    }
                };
            await DbManager.AddRecord(newRecord);
            await OnItemAdded.InvokeAsync(ObjectId);
        } else
        {
            Console.WriteLine($"Db entry exists for object {ObjectId}, updating!");
            current.Image = imageBytes;
            current.Preview = imagePreviewBytes;
            current.ContentType = e.File.ContentType;

            var updatedRecord = new StoreRecord<MessierObjectEntry>
            {
                Storename = DbConfig.StoreName,
                Data = current
            };
            await DbManager.UpdateRecord(updatedRecord);
        }
        IsGenerating = false;
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Object == null || !ObjectId.HasValue) return;
        var current = await DbManager.GetRecordById<long, MessierObjectEntry>(DbConfig.StoreName, ObjectId.Value);
        if (current == null) {
            ImageDataURL = Object.PictureUrl;
        } else {
            var imagesrc = Convert.ToBase64String(current.Preview!);
            ImageDataURL = string.Format($"data:{current.ContentType};base64,{imagesrc}");
            Loaded = true;
        }
    }
}
