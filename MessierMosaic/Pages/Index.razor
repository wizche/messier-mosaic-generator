@page "/"
@using Blazored.Modal.Services;
@using MessierMosaic.Db;
@using MessierMosaic.ViewModels;
@using System.Diagnostics;
@using TG.Blazor.IndexedDB;
@inject HttpClient Http
@inject IndexedDBManager DbManager

<PageTitle>Index</PageTitle>

@{
    var objects = 110;
    var cols = 5;
    var rows = Math.Floor((double)(objects / cols));
    var counter = 1;
}

<div class="container-fluid">
    <div class="d-flex justify-content-between mb-2">
        <div>
            <h5>Uploaded @Uploaded / 110</h5>
        </div>
        <div>
            <button @onclick="GenerateImage" type="button" class="btn btn-primary">Generate</button>
        </div>
    </div>
    <div class="row">
    @for (var r = 0; r < rows; r++)
    {
       <div class="row mb-2">
            @for (var i = 0; i < cols; i++)
            {
                <div class="col-md">
                    <MessierObjectView 
                        ObjectId="@counter" 
                        Object="GetObject(counter)"
                        OnItemAdded="ItemAdded"
                        OnItemDeleted="ItemDeleted">
                    </MessierObjectView>
                </div>
                counter += 1;
            }
        </div>
    }
    </div>
</div>

@code {
    public MessierObject[] MessierObjects = new MessierObject[111];
    public int Uploaded = 0;
    [CascadingParameter] public IModalService Modal { get; set; } = default!;

    public MessierObject? GetObject(int id)
    {
        try
        {
            return MessierObjects.First(m => m.Name == $"M{id}");
        } catch(Exception ex)
        {
            Console.WriteLine($"Unable to get messier {id}: {ex.Message}");
            return null;
        }
    }

    protected async override Task OnInitializedAsync()
    {
        MessierObjects = await Http.GetFromJsonAsync<MessierObject[]>("data/messier.json");
        var results = await DbManager.GetRecords<MessierObjectEntry>(DbConfig.StoreName);
        Uploaded = results.Count();
        StateHasChanged();
    }

    public async void GenerateImage()
    {
        Modal.Show<GenerateView>("Generate Mosaic");
    }

    public void ItemAdded(long? id)
    {
        Uploaded += 1;
    }

    public void ItemDeleted(long? id)
    {
        Uploaded -= 1;
    }
}